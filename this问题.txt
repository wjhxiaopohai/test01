调用谁，this就指向谁<br>
    解析器在调用函数每次都会向函数内部传递进一个隐含的参数<br>
    这个隐含的参数就是this，this指向的是一个对象<br>
    这个对象我们称为函数执行的上下文对象<br>
    根据函数调用的方式不同，this指向不同的对象<br>
    （1）以函数调用的形式，this指向window<br/>
    （2）以方法调用的形式，this指向该方法

function fun(){
    console.log(this);
  }
  fun();  //window


  var obj = {
    name:"小王",
    sayName:fun
  }
  console.log(fun == obj.sayName);//true
  obj.sayName();  //{name: "小王", sayName: ?}

-------------------------------------------

<script>
  var name = "小王";

  function fun (){
    console.log(name);
  }
  function fun2(){
    console.log(this.name);
  }

  var obj1 = {
    name:"233",
    say:fun
  }

  var obj2 = {
    name:"666",
    say:fun2
  }

  obj1.say();//小王
  obj2.say();//666
</script>

---------------------------------------

<script>
  var name = "1";
  function Person(){
     name = "2";
     this.name = "3"
    // console.log(name);
  }
  var obj = new Person();
  // console.log(typeof obj); //object
  // console.log(obj)  //Person?{name: "3"}
  console.log(obj.name)//3


  //1
  var age = 44;
  function Dog(){
    this.age = 55;
    var age = 66;
    console.log(age);  //66，函数里面声明变量，是私有变量，所以是66
    console.log(this.age)  //55,函数中的this指向全局，所以是55
  }
  var age = 77;
  Dog();



  //2
  var age2 = 44;
  function Dog2(){
    this.age2 = 55;
    age2 = 66;  //因为没有var声明，为全局变量，所以都是全局变量且为66
    console.log(age2);  //66
    console.log(this.age2)  //66
  }
  var age2 = 77;
  Dog2();

</script>

-------------------------------------------

<script>
  var name = "小红";
  function Person(){
     
    this.name = "小明";
    var name = "小王";
    console.log(name);  //小王
    console.log(this.name);  //小明
  }
  var obj = new Person();  //构造函数，创建一个新对象，this指向该对象。
  
</script>

-----------------------------------------------

/*
  构造函数的执行流程：
  1.立刻创建一个新的对象
  2.将新建的对象设置为函数中this，在构造函数中可以使用this来引用新建对象
  3.逐行执行函数中的代码
  4.将新建的对象作为返回值返回

  使用同一个构造函数创建的对象，称为类的对象，也将一个构造函数称为一个类；
  将通过一个构造函数创建的对象，称为该类的实例对象。

  构造函数和普通函数的区别：
  普通函数时直接调用的，而构造函数需要使用new关键字来调用。
  */
  function Person() {
    name = "111";
    this.name = "222";
    this.say = function(){
      console.log(name); //111
      console.log(this.name); //222
    }
  }
  var obj = new Person();
  obj.say()
  console.log(obj instanceof Person)//true，对象是否为类的实例。
